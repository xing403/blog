import{_ as t,C as p,c,H as s,k as a,w as o,a as n,Q as r,o as y}from"./chunks/framework.b0840c63.js";const B=JSON.parse('{"title":"TypeScript","description":"","frontmatter":{"title":"TypeScript","layout":"doc"},"headers":[],"relativePath":"blogs/others/typescript.md","filePath":"blogs/others/typescript.md","lastUpdated":1698109494000}'),E={name:"blogs/others/typescript.md"},i=a("h1",{id:"typescript",tabindex:"-1"},[n("TypeScript "),a("a",{class:"header-anchor",href:"#typescript","aria-label":'Permalink to "TypeScript"'},"​")],-1),F={style:{display:"flex",gap:"10px"}},d=r(`<h2 id="typescript-与javascript的区别" tabindex="-1">TypeScript 与JavaScript的区别 <a class="header-anchor" href="#typescript-与javascript的区别" aria-label="Permalink to &quot;TypeScript 与JavaScript的区别&quot;">​</a></h2><p>TypeScript （TS）是JavaScript（JS） 的一个超集（即：JavaScript所拥有的TypeScript同样拥有），TypeScript 在 JavaScript基础上进行了类型的支持，使开发更高效</p><p>TypeScript是静态类型的编程语言，JavaScript是动态类型编程语言</p><ul><li>静态类型：在编译期进行类型检查</li><li>动态类型：在执行期进行类型检查</li><li>编译和执行的顺序：先编译再运行</li></ul><p>因此typeScript相对于JavaScript更早发现代码的问题</p><h2 id="安装typescript" tabindex="-1">安装TypeScript <a class="header-anchor" href="#安装typescript" aria-label="Permalink to &quot;安装TypeScript&quot;">​</a></h2><p>由于node.js/浏览器仅认识js，需要将TS转译成JS代码，使代码能执行</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-g</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">typescript</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 检查是否安装成功 由于typescript提供tsc命令</span></span>
<span class="line"><span style="color:#B392F0;">tsc</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-v</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-g</span><span style="color:#24292E;"> </span><span style="color:#032F62;">typescript</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># 检查是否安装成功 由于typescript提供tsc命令</span></span>
<span class="line"><span style="color:#6F42C1;">tsc</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-v</span></span></code></pre></div><blockquote><p><em>问题</em>: 由于控制台认为tsc命令不是个安全的命令，需要执行一管理员身份运行</p></blockquote><p><img src="https://raw.githubusercontent.com/xing403/images-repo/main/assets/images/ts/987153907.png" alt="987153907.png"></p><p>修改：</p><ul><li>以管理员身份运行 PowerShell</li><li>输入 <code> set-ExecutionPolicy RemoteSigned</code></li><li>输入是或者Y 即可</li></ul><h3 id="创建目录-自己命名" tabindex="-1">创建目录（自己命名） <a class="header-anchor" href="#创建目录-自己命名" aria-label="Permalink to &quot;创建目录（自己命名）&quot;">​</a></h3><p><em>尽量用英文命名</em></p><p>在目录下面创建<code>hello.ts</code>并写入</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;hello TypeScript&quot;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;hello TypeScript&quot;</span><span style="color:#24292E;">)</span></span></code></pre></div><blockquote><p>编译 tsc hello.ts</p></blockquote><p>在同级目录下会自动生成一个hello.js 的文件 <img src="https://raw.githubusercontent.com/xing403/images-repo/main/assets/images/ts/1997145011.png" alt="1997145011.png"></p><blockquote><p>运行 node hello.js</p></blockquote><p>将会运行 hello.js 的代码 <img src="https://raw.githubusercontent.com/xing403/images-repo/main/assets/images/ts/3346233448.png" alt="3346233448.png"></p><h2 id="简化运行ts-命令" tabindex="-1">简化运行ts 命令 <a class="header-anchor" href="#简化运行ts-命令" aria-label="Permalink to &quot;简化运行ts 命令&quot;">​</a></h2><p>由于执行 ts代码需要先执行 tsc 再执行node 分为两步，为了方便将这两步合并</p><blockquote><p>安装 ts-node 包</p></blockquote><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-g</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ts-node</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-g</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ts-node</span></span></code></pre></div><blockquote><p>运行时</p></blockquote><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">ts-node</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hello.ts</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">ts-node</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hello.ts</span></span></code></pre></div><p><em>注意</em>：在内部将ts转化为js代码， 但没有生成js文件，直接运行了这个转化的js代码，并不是单纯的将两步合并起来</p><h2 id="typescript常用类型" tabindex="-1">TypeScript常用类型 <a class="header-anchor" href="#typescript常用类型" aria-label="Permalink to &quot;TypeScript常用类型&quot;">​</a></h2><h3 id="ts类型提示" tabindex="-1">TS类型提示 <a class="header-anchor" href="#ts类型提示" aria-label="Permalink to &quot;TS类型提示&quot;">​</a></h3><p>JS中有类型number/string 但在并不会检查是否发生变化，因此会导致问题的出现，而且编译器不会进行提示</p><p>TS会进行代码错误提示</p><h3 id="ts类型注解" tabindex="-1">TS类型注解 <a class="header-anchor" href="#ts类型注解" aria-label="Permalink to &quot;TS类型注解&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// let 变量名:变量类型 = 变量值</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> age</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// let 变量名:变量类型 = 变量值</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> age</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span></span></code></pre></div><h3 id="ts基础类型" tabindex="-1">TS基础类型 <a class="header-anchor" href="#ts基础类型" aria-label="Permalink to &quot;TS基础类型&quot;">​</a></h3><table><thead><tr><th>原始类型</th><th>对象类型</th></tr></thead><tbody><tr><td><code>number</code>,<code>string</code>,<code>boolean</code>,<code>null</code>,<code>undefined</code>,<code>symbol</code></td><td><code>Object(数组，对象，函数)</code></td></tr></tbody></table><table><thead><tr><th>TS中增加</th></tr></thead><tbody><tr><td>联合类型，<code>自定义类型（类型别名）</code>，<code>接口</code>，<code>元组</code>，<code>字面量类型</code>，<code>枚举</code>，<code>void</code>，<code>any</code>等</td></tr></tbody></table><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 简单类型</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> age</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;张三&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> sex</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">boolean</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">//...</span></span>
<span class="line"><span style="color:#6A737D;">// 复杂</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> family</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">[] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;爸爸&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;妈妈&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#6A737D;">// 定义一个字符串类型的数组</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> family</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Array</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#9ECBFF;">&quot;爸爸&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;妈妈&quot;</span><span style="color:#E1E4E8;">] </span><span style="color:#6A737D;">// 定义一个字符串类型的数组</span></span>
<span class="line"><span style="color:#6A737D;">// 联合类型</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> data</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">)[] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">12</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;李四&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;王五&quot;</span><span style="color:#E1E4E8;">]</span><span style="color:#6A737D;">//定义一个字符串或者是数值类型的数组</span></span>
<span class="line"><span style="color:#6A737D;">// 注意：| 的优先级没有[] 高，因此(number | string)[] 和 number | string[]是两种结果</span></span>
<span class="line"><span style="color:#6A737D;">// 类型别名 ~type 名称 = 类型~</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NumberOrString</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> data</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NumberOrString</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">12</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> data2</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NumberOrString</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;12&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// 函数类型</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">num1</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">num2</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> num1 </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> num2;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 表达式类型</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">num1</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">num2</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> num1 </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> num2;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// void 类型表示该函数没有返回值</span></span>
<span class="line"><span style="color:#6A737D;">// 可选参数，注意：可选参数只能出现在必选参数的后面</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">slice</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">str</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">start</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">end</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"><span style="color:#6A737D;">// 接口：interface 接口名{}</span></span>
<span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">age</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">P</span><span style="color:#F97583;">:</span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {name:</span><span style="color:#9ECBFF;">&quot;张三&quot;</span><span style="color:#E1E4E8;">, age:</span><span style="color:#79B8FF;">18</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 简单类型</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> age</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;张三&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> sex</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">boolean</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">//...</span></span>
<span class="line"><span style="color:#6A737D;">// 复杂</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> family</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">[] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;爸爸&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;妈妈&quot;</span><span style="color:#24292E;">] </span><span style="color:#6A737D;">// 定义一个字符串类型的数组</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> family</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">string</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#032F62;">&quot;爸爸&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;妈妈&quot;</span><span style="color:#24292E;">] </span><span style="color:#6A737D;">// 定义一个字符串类型的数组</span></span>
<span class="line"><span style="color:#6A737D;">// 联合类型</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> data</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">)[] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">12</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;李四&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;王五&quot;</span><span style="color:#24292E;">]</span><span style="color:#6A737D;">//定义一个字符串或者是数值类型的数组</span></span>
<span class="line"><span style="color:#6A737D;">// 注意：| 的优先级没有[] 高，因此(number | string)[] 和 number | string[]是两种结果</span></span>
<span class="line"><span style="color:#6A737D;">// 类型别名 ~type 名称 = 类型~</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NumberOrString</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> data</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NumberOrString</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">12</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> data2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NumberOrString</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;12&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// 函数类型</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#E36209;">num1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">, </span><span style="color:#E36209;">num2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> num1 </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> num2;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 表达式类型</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">num1</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">, </span><span style="color:#E36209;">num2</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> num1 </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> num2;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// void 类型表示该函数没有返回值</span></span>
<span class="line"><span style="color:#6A737D;">// 可选参数，注意：可选参数只能出现在必选参数的后面</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">slice</span><span style="color:#24292E;">(</span><span style="color:#E36209;">str</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">start</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">, </span><span style="color:#E36209;">end</span><span style="color:#D73A49;">?:</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> {}</span></span>
<span class="line"><span style="color:#6A737D;">// 接口：interface 接口名{}</span></span>
<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">string</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#E36209;">age</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">P</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {name:</span><span style="color:#032F62;">&quot;张三&quot;</span><span style="color:#24292E;">, age:</span><span style="color:#005CC5;">18</span><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="type-和-interface-的区别" tabindex="-1">type 和 interface 的区别 <a class="header-anchor" href="#type-和-interface-的区别" aria-label="Permalink to &quot;type 和 interface 的区别&quot;">​</a></h3><ul><li>type是个类型赋值，因此在定义时需要用 = 进行赋值，可以对任意类型进行别名</li><li>interface 是个类 不需要用=，只能对对象使用，其他类型不能使用，接口中可以使用继承</li></ul><h4 id="接口继承" tabindex="-1">接口继承 <a class="header-anchor" href="#接口继承" aria-label="Permalink to &quot;接口继承&quot;">​</a></h4><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Point2D</span><span style="color:#E1E4E8;"> {</span><span style="color:#FFAB70;">x</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">y</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Point3D</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Point2D</span><span style="color:#E1E4E8;"> {</span><span style="color:#FFAB70;">z</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Point2D</span><span style="color:#24292E;"> {</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">,</span><span style="color:#E36209;">y</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Point3D</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">extends</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Point2D</span><span style="color:#24292E;"> {</span><span style="color:#E36209;">z</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="元组" tabindex="-1">元组 <a class="header-anchor" href="#元组" aria-label="Permalink to &quot;元组&quot;">​</a></h3><p>由于数组的不定长的原因，在某些场景下虽然数组能满足要求，但不适用，例如定位经纬度等，因此需要有定长的数组来实现。元组：一种特殊的数组，知道数组中的元素个数，以及特定索引对应的类型</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> Position</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">39</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">144</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#6A737D;">// 元组中只能出现两元素，并且两个都是number类型</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> Position</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">number</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">39</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">144</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#6A737D;">// 元组中只能出现两元素，并且两个都是number类型</span></span></code></pre></div><h3 id="ts中类型推论" tabindex="-1">TS中类型推论 <a class="header-anchor" href="#ts中类型推论" aria-label="Permalink to &quot;TS中类型推论&quot;">​</a></h3><p>能推导出当前变量或对象的类型或者拥有的属性，即可省略类型注解</p><ul><li>在变量值初始化时</li><li>在函数返回值时</li><li>类型检查机制依旧存在</li></ul><h2 id="ts类型断言" tabindex="-1">TS类型断言 <a class="header-anchor" href="#ts类型断言" aria-label="Permalink to &quot;TS类型断言&quot;">​</a></h2><p>在操作DOM时获取标签，但默认是获取的对象所有用的类型均为HTMLElement 所包含的属性为所有标签的公共属性，某些特殊的属性针对特殊标签并没有，因此使用断言获取指定类型的标签，例如：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">href</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;http://ilstudy.vip&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">“BlogUrl”</span><span style="color:#E1E4E8;">&gt;星如雨博客&lt;/</span><span style="color:#85E89D;">a</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">&lt;</span><span style="color:#22863A;">a</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">href</span><span style="color:#24292E;">=</span><span style="color:#032F62;">&quot;http://ilstudy.vip&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">id</span><span style="color:#24292E;">=</span><span style="color:#032F62;">“BlogUrl”</span><span style="color:#24292E;">&gt;星如雨博客&lt;/</span><span style="color:#22863A;">a</span><span style="color:#24292E;">&gt;</span></span></code></pre></div><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> BlogUrl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;BlogUrl&quot;</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">// 获取的类型是HTMLElement</span></span>
<span class="line"><span style="color:#6A737D;">// 使用 BlogUrl.href 的时候会报错</span></span>
<span class="line"><span style="color:#6A737D;">// 使用断言</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> BlogUrl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;BlogUrl&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">HTMLAnchorElement</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 再次使用 BlogUrl.href正常</span></span>
<span class="line"><span style="color:#6A737D;">//另一种写法， 不建议这种写法 会和 react 语法冲突</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> BlogUrl </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#79B8FF;">HTMLAnchorElement</span><span style="color:#E1E4E8;">&gt;document.getElementById(&quot;BlogUrl&quot;);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> BlogUrl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;BlogUrl&quot;</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">// 获取的类型是HTMLElement</span></span>
<span class="line"><span style="color:#6A737D;">// 使用 BlogUrl.href 的时候会报错</span></span>
<span class="line"><span style="color:#6A737D;">// 使用断言</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> BlogUrl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;BlogUrl&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">HTMLAnchorElement</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 再次使用 BlogUrl.href正常</span></span>
<span class="line"><span style="color:#6A737D;">//另一种写法， 不建议这种写法 会和 react 语法冲突</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> BlogUrl </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> &lt;</span><span style="color:#005CC5;">HTMLAnchorElement</span><span style="color:#24292E;">&gt;document.getElementById(&quot;BlogUrl&quot;);</span></span></code></pre></div><blockquote><p>控制台查看指定元素的类型$0, 使用 console.dir($0) 手动查看当前元素具体类型，在列表的最后</p></blockquote><h3 id="字面量类型变量" tabindex="-1">字面量类型变量 <a class="header-anchor" href="#字面量类型变量" aria-label="Permalink to &quot;字面量类型变量&quot;">​</a></h3><p>使用const关键字</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> str1 </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;123&quot;</span><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// 类型为string</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;123&quot;</span><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// 类型为&quot;123&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// const 是将值直接作为了类型，const声明的为常量，值不能发生改变</span></span>
<span class="line"><span style="color:#6A737D;">// 使用场景，一般与联合类型使用，确定某些值，中进行选择</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> str1 </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;123&quot;</span><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 类型为string</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;123&quot;</span><span style="color:#24292E;">		</span><span style="color:#6A737D;">// 类型为&quot;123&quot;</span></span>
<span class="line"><span style="color:#6A737D;">// const 是将值直接作为了类型，const声明的为常量，值不能发生改变</span></span>
<span class="line"><span style="color:#6A737D;">// 使用场景，一般与联合类型使用，确定某些值，中进行选择</span></span></code></pre></div><h3 id="枚举类型" tabindex="-1">枚举类型 <a class="header-anchor" href="#枚举类型" aria-label="Permalink to &quot;枚举类型&quot;">​</a></h3><p>是字面量类型和联合类型共同的结果，枚举类型=字面量类型+联合累心</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Direction</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">Up</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">Down</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">Left</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">Right</span><span style="color:#E1E4E8;">};</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> dir</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Up&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Down&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Left&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Right&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 访问枚举成员</span></span>
<span class="line"><span style="color:#E1E4E8;">Direction.Up;</span></span>
<span class="line"><span style="color:#6A737D;">//...</span></span>
<span class="line"><span style="color:#6A737D;">//枚举成员的值</span></span>
<span class="line"><span style="color:#E1E4E8;">默认是从0开始1，</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">，</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">，</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">.自增的关系</span></span>
<span class="line"><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Direction</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">Up</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">Down</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">Left</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">Right</span><span style="color:#E1E4E8;">};</span><span style="color:#6A737D;">//从10开始11，12，13，....自增的关系</span></span>
<span class="line"><span style="color:#6A737D;">//字符串类型的枚举</span></span>
<span class="line"><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Direction</span><span style="color:#E1E4E8;">{</span><span style="color:#79B8FF;">Up</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Up&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">Down</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Down&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">Left</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Left&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">Right</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Right&quot;</span><span style="color:#E1E4E8;">};</span><span style="color:#6A737D;">//字符串类型没有默认自增长</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Direction</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">Up</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">Down</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">Left</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">Right</span><span style="color:#24292E;">};</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> dir</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Up&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Down&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Left&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Right&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 访问枚举成员</span></span>
<span class="line"><span style="color:#24292E;">Direction.Up;</span></span>
<span class="line"><span style="color:#6A737D;">//...</span></span>
<span class="line"><span style="color:#6A737D;">//枚举成员的值</span></span>
<span class="line"><span style="color:#24292E;">默认是从0开始1，</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">，</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">，</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">.自增的关系</span></span>
<span class="line"><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Direction</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">Up</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">Down</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">Left</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">Right</span><span style="color:#24292E;">};</span><span style="color:#6A737D;">//从10开始11，12，13，....自增的关系</span></span>
<span class="line"><span style="color:#6A737D;">//字符串类型的枚举</span></span>
<span class="line"><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Direction</span><span style="color:#24292E;">{</span><span style="color:#005CC5;">Up</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Up&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">Down</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Down&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">Left</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Left&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">Right</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Right&quot;</span><span style="color:#24292E;">};</span><span style="color:#6A737D;">//字符串类型没有默认自增长</span></span></code></pre></div><h3 id="any类型" tabindex="-1">any类型 <a class="header-anchor" href="#any类型" aria-label="Permalink to &quot;any类型&quot;">​</a></h3><p>any类型取消所有的变量类型判断，变成为任意类型，代码也不会给予相应的提示，失去TS的代码类型检查功能，容易出现错误。</p><p>对于刚命名的 变量没有给类型，并且没有初始值时，此时的类型为any类型</p><h3 id="typeof" tabindex="-1">typeof <a class="header-anchor" href="#typeof" aria-label="Permalink to &quot;typeof&quot;">​</a></h3><ol><li>获取变量的类型</li><li>代码上下文使用，类似于别名变量类型：利用类型推论，自动识别变量类型</li></ol><h2 id="ts中class关键字" tabindex="-1">TS中Class关键字 <a class="header-anchor" href="#ts中class关键字" aria-label="Permalink to &quot;TS中Class关键字&quot;">​</a></h2><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 属性或方法</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> p </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 属性或方法</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> p </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="class-构造函数" tabindex="-1">class 构造函数 <a class="header-anchor" href="#class-构造函数" aria-label="Permalink to &quot;class 构造函数&quot;">​</a></h3><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Person</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 构造函数没有返回值</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#6A737D;">/*变量*/</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// this.变量名 ；访问该类中的属性和方法</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Person</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 构造函数没有返回值</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span><span style="color:#6A737D;">/*变量*/</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// this.变量名 ；访问该类中的属性和方法</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="class-继承" tabindex="-1">class 继承 <a class="header-anchor" href="#class-继承" aria-label="Permalink to &quot;class 继承&quot;">​</a></h3><blockquote><p>extends js中代码继承父类，公共属性使用继承，父级是 class类型</p></blockquote><p>属性与方法的继承，重写</p><blockquote><p>implements 实现接口 TS中特有，父级是interface类型</p></blockquote><p>属性与方法的继承、实现</p><h3 id="class-修饰符" tabindex="-1">class 修饰符 <a class="header-anchor" href="#class-修饰符" aria-label="Permalink to &quot;class 修饰符&quot;">​</a></h3><table><thead><tr><th>修饰符</th><th>等级</th></tr></thead><tbody><tr><td>public</td><td>公共的（所有位置均可访问），默认修饰符</td></tr><tr><td>protected</td><td>受保护的（类内和子类中可用，实例对象无法使用）</td></tr><tr><td>private</td><td>私有的（当前类中可见，实例化对象和子类中不能使用）</td></tr></tbody></table><h3 id="readonly-关键字" tabindex="-1">readonly 关键字 <a class="header-anchor" href="#readonly-关键字" aria-label="Permalink to &quot;readonly 关键字&quot;">​</a></h3><p>只能在构造函数中修改被readonly修饰的属性，其他地方无法修改被readonly修饰的属性的属性值，被readonly修饰的属性可以有默认属性值</p><p>readonly只能修饰属性，不能修饰方法</p><h2 id="ts类型兼容性" tabindex="-1">TS类型兼容性 <a class="header-anchor" href="#ts类型兼容性" aria-label="Permalink to &quot;TS类型兼容性&quot;">​</a></h2><blockquote><p>两种类型系统</p></blockquote><ul><li>结构化类型系统（Structural Type System）</li><li>标明类型系统（Nominal Type System）</li></ul><p>TS中采用的是结构化类型系统：类型检查关注的是值所具有的属性，即是两个对象所具有的相同的属性以及属性类型，则认为他们是相同类型的，对于对象来讲y对象所具有的属性，包含x所具有的属性，在x中都有，则说明x兼容y（属性多的可以赋值给属性少的）</p><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">point</span><span style="color:#E1E4E8;">{</span><span style="color:#FFAB70;">x</span><span style="color:#F97583;">:</span><span style="color:#B392F0;">nuumber</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">y</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">point2D</span><span style="color:#E1E4E8;">{</span><span style="color:#FFAB70;">x</span><span style="color:#F97583;">:</span><span style="color:#B392F0;">nuumber</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">y</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">point3D</span><span style="color:#E1E4E8;">{</span><span style="color:#FFAB70;">x</span><span style="color:#F97583;">:</span><span style="color:#B392F0;">nuumber</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">y</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">，</span><span style="color:#B392F0;">z</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// pint类与point2D类只有类名不同，但具有相同的属性，则认为point和point2D是相同的属性以及属性类型是否相同</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> p1</span><span style="color:#F97583;">:</span><span style="color:#B392F0;">point</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">point2D</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> p2</span><span style="color:#F97583;">:</span><span style="color:#B392F0;">point</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">point3D</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">//向上兼容</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">point</span><span style="color:#24292E;">{</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;">nuumber</span><span style="color:#24292E;">,</span><span style="color:#E36209;">y</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">point2D</span><span style="color:#24292E;">{</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;">nuumber</span><span style="color:#24292E;">,</span><span style="color:#E36209;">y</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">class</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">point3D</span><span style="color:#24292E;">{</span><span style="color:#E36209;">x</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;">nuumber</span><span style="color:#24292E;">,</span><span style="color:#E36209;">y</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">，</span><span style="color:#6F42C1;">z</span><span style="color:#D73A49;">:</span><span style="color:#005CC5;">number</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// pint类与point2D类只有类名不同，但具有相同的属性，则认为point和point2D是相同的属性以及属性类型是否相同</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> p1</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;">point</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">point2D</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> p2</span><span style="color:#D73A49;">:</span><span style="color:#6F42C1;">point</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">point3D</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">//向上兼容</span></span></code></pre></div><h3 id="接口兼容性" tabindex="-1">接口兼容性 <a class="header-anchor" href="#接口兼容性" aria-label="Permalink to &quot;接口兼容性&quot;">​</a></h3><p>interface和class 相似，并且可以相互兼容</p><h3 id="函数兼容性" tabindex="-1">函数兼容性 <a class="header-anchor" href="#函数兼容性" aria-label="Permalink to &quot;函数兼容性&quot;">​</a></h3><p>函数：参数个数，参数类型，函数返回值</p><ul><li>参数个数兼容：参数少的可以赋值给参数多的</li><li>参数类型兼容：相同位置的参数进行兼容，原始类型或对象类型（对象为参数兼容）</li><li>返回值兼容：返回值类型相同的相互兼容，返回值为对象的参照对象属性个数兼容</li></ul>`,87);function u(h,D,C,g,A,b){const e=p("el-divider"),l=p("el-tag");return y(),c("div",null,[i,s(e),a("div",F,[s(l,null,{default:o(()=>[n("ts")]),_:1}),s(l,null,{default:o(()=>[n("TypeScript")]),_:1})]),d])}const q=t(E,[["render",u]]);export{B as __pageData,q as default};
