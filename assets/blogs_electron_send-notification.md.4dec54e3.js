import{_ as c,C as p,c as i,H as s,k as l,w as n,a,Q as r,o as y}from"./chunks/framework.b0840c63.js";const A=JSON.parse('{"title":"Notification 发送通知","description":"","frontmatter":{"title":"Notification 发送通知","layout":"doc"},"headers":[],"relativePath":"blogs/electron/send-notification.md","filePath":"blogs/electron/send-notification.md","lastUpdated":1694504129000}'),E={name:"blogs/electron/send-notification.md"},d=l("h1",{id:"notification-发送通知",tabindex:"-1"},[a("Notification 发送通知 "),l("a",{class:"header-anchor",href:"#notification-发送通知","aria-label":'Permalink to "Notification 发送通知"'},"​")],-1),h={style:{display:"flex",gap:"10px"}},F=r(`<ul><li>前提请先了解主进程与渲染进程通信</li></ul><h2 id="主进程中定义接受通知的函数" tabindex="-1">主进程中定义接受通知的函数 <a class="header-anchor" href="#主进程中定义接受通知的函数" aria-label="Permalink to &quot;主进程中定义接受通知的函数&quot;">​</a></h2><blockquote><p>通过监听渲染进程发送到的通知消息展示需要通知的信息</p></blockquote><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ipcMain.</span><span style="color:#B392F0;">handle</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;notification&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">_event</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">title</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">body</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Notification</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    title,</span></span>
<span class="line"><span style="color:#E1E4E8;">    body,</span></span>
<span class="line"><span style="color:#E1E4E8;">  }).</span><span style="color:#B392F0;">show</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ipcMain.</span><span style="color:#6F42C1;">handle</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;notification&#39;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">_event</span><span style="color:#24292E;">, </span><span style="color:#E36209;">title</span><span style="color:#24292E;">, </span><span style="color:#E36209;">body</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Notification</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    title,</span></span>
<span class="line"><span style="color:#24292E;">    body,</span></span>
<span class="line"><span style="color:#24292E;">  }).</span><span style="color:#6F42C1;">show</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><blockquote><p>Windows 10默认通知时间为 <code>5s</code></p></blockquote><h2 id="渲染进程定义发送函数-并暴露给页面文件使用" tabindex="-1">渲染进程定义发送函数，并暴露给页面文件使用 <a class="header-anchor" href="#渲染进程定义发送函数-并暴露给页面文件使用" aria-label="Permalink to &quot;渲染进程定义发送函数，并暴露给页面文件使用&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 定义发送给主进程的函数</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">sendNotification</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">title</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">body</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> ipcRenderer.</span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;notification&#39;</span><span style="color:#E1E4E8;">, title, body)</span></span>
<span class="line"><span style="color:#6A737D;">// 使用\`contextBridge.exposeInMainWorld\` 暴露 sendNotification 函数</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 定义发送给主进程的函数</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">sendNotification</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">title</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">, </span><span style="color:#E36209;">body</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> ipcRenderer.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;notification&#39;</span><span style="color:#24292E;">, title, body)</span></span>
<span class="line"><span style="color:#6A737D;">// 使用\`contextBridge.exposeInMainWorld\` 暴露 sendNotification 函数</span></span></code></pre></div><h2 id="页面中使用" tabindex="-1">页面中使用 <a class="header-anchor" href="#页面中使用" aria-label="Permalink to &quot;页面中使用&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// UtilsTools 渲染进程中暴露的实例名称（自定义），包括暴露的 sendNotification 方法</span></span>
<span class="line"><span style="color:#E1E4E8;">window.UtilsTools.</span><span style="color:#B392F0;">sendNotification</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;title&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">\`\${</span><span style="color:#E1E4E8;">count</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">value</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// UtilsTools 渲染进程中暴露的实例名称（自定义），包括暴露的 sendNotification 方法</span></span>
<span class="line"><span style="color:#24292E;">window.UtilsTools.</span><span style="color:#6F42C1;">sendNotification</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;title&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">count</span><span style="color:#032F62;">.</span><span style="color:#24292E;">value</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">)</span></span></code></pre></div>`,9),u=l("div",null,"这里使用的是主进程与渲染进程双向通信，可在通知后或者点击通知后执行操作返回给渲染进程，以便以他操作",-1);function _(f,g,b,v,C,k){const e=p("el-divider"),o=p("el-tag"),t=p("el-alert");return y(),i("div",null,[d,s(e),l("div",h,[s(o,null,{default:n(()=>[a("electron")]),_:1}),s(o,null,{default:n(()=>[a("vue")]),_:1}),s(o,null,{default:n(()=>[a("vite")]),_:1}),s(o,null,{default:n(()=>[a("notification")]),_:1})]),F,s(t,{"show-icon":"",type:"info",effect:"dark",closable:!1},{title:n(()=>[u]),_:1})])}const N=c(E,[["render",_]]);export{A as __pageData,N as default};
