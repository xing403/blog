import{_ as e,c as s,o as n,Q as a}from"./chunks/framework.b0840c63.js";const o="/images/schedule_logo.png",t="/images/screenshot/banner1.png",l="/images/screenshot/banner2.png",b=JSON.parse('{"title":"introduction","description":"","frontmatter":{"layout":"doc","title":"introduction"},"headers":[],"relativePath":"project/schedule/introduction.md","filePath":"project/schedule/introduction.md","lastUpdated":1702524439000}'),c={name:"project/schedule/introduction.md"},p=a('<div align="center"><img src="'+o+'" align="center" width="200"></div><h3 align="center">Schedule</h3><p>A Schedule Tools, You can create a scheduled task by using the cron string</p><blockquote><p>home</p></blockquote><p><img src="'+t+'" alt="index page"></p><blockquote><p>create schedule</p></blockquote><p><img src="'+l+`" alt="index page"></p><h2 id="schedule-directive" tabindex="-1">Schedule directive <a class="header-anchor" href="#schedule-directive" aria-label="Permalink to &quot;Schedule directive&quot;">​</a></h2><p>You can select part of the instructions, combine and sort, to achieve the effect you want. For example, by the combination of <code>date-time</code> and <code>notification</code> two directives, set to execute once an hour, then you get an instruction that will ring every hour. If you are a fan of the Internet of Things (IOT) and have built-in MQTT messaging service, you only need to configure your own MQTT service to send MQTT content on a regular basis. more directive see <a href="/project/schedule/directives/description.html"> here </a></p><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><blockquote><p>need</p></blockquote><ul><li>node &gt;= 16.*</li><li>typescript &gt;= 5.1.3</li><li>pnpm &gt;= 8.6.0</li></ul><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># install dependencies</span></span>
<span class="line"><span style="color:#B392F0;">pnpm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">i</span></span>
<span class="line"><span style="color:#6A737D;"># run</span></span>
<span class="line"><span style="color:#B392F0;">pnpm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">dev</span></span>
<span class="line"><span style="color:#6A737D;"># build</span></span>
<span class="line"><span style="color:#B392F0;">pnpm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># install dependencies</span></span>
<span class="line"><span style="color:#6F42C1;">pnpm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">i</span></span>
<span class="line"><span style="color:#6A737D;"># run</span></span>
<span class="line"><span style="color:#6F42C1;">pnpm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">dev</span></span>
<span class="line"><span style="color:#6A737D;"># build</span></span>
<span class="line"><span style="color:#6F42C1;">pnpm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span></span></code></pre></div>`,13),i=[p];function r(d,u,h,g,y,m){return n(),s("div",null,i)}const v=e(c,[["render",r]]);export{b as __pageData,v as default};
