import{av as l,p,U as a,q as s,O as h,S as n,aR as r,ah as i,m as k}from"./chunks/framework.7WxYM5Sz.js";const F=JSON.parse('{"title":"单链表","description":"","frontmatter":{"title":"单链表","layout":"doc"},"headers":[],"relativePath":"blogs/data-structure/link-list.md","filePath":"blogs/data-structure/link-list.md","lastUpdated":1698109494000}'),d={name:"blogs/data-structure/link-list.md"},o=s("h1",{id:"单链表",tabindex:"-1"},[n("单链表 "),s("a",{class:"header-anchor",href:"#单链表","aria-label":'Permalink to "单链表"'},"​")],-1),c={style:{display:"flex",gap:"10px"}},E=r(`<h2 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h2><p>线性表的链式存储又称单链表，它是只通过一组任意的存储单元来存储线性表的数据元素。为建立数据元素之间的线性关系，每个链表节点除了存放元素自身的信息外，还需要存放指向其后继的指针。</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ElementType data;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 数据域，存放数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Node</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">next;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 指针域，存放其后继节点的地址</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="头指针和头结点的区别" tabindex="-1">头指针和头结点的区别 <a class="header-anchor" href="#头指针和头结点的区别" aria-label="Permalink to &quot;头指针和头结点的区别&quot;">​</a></h2><p>不管带不带头节点，头指针始终指向链表的第一个节点，而头结点是带头结点的链表中的第一个节点，节点数据域通常不存储信息。 头结点的有点：</p><ul><li>由于第一个数据节点的位置被存放在头结点的指针域中，云次在链表的第一个位置上的操作和在表的其他位置操作一致，无需进行特殊处理。</li><li>无论链表是否为空，其头指针都指向头结点的非空指针(空表中头结点的指针域为空)，因此空表和非空表的处理也得到了统一。</li></ul><h2 id="链表基本操作" tabindex="-1">链表基本操作 <a class="header-anchor" href="#链表基本操作" aria-label="Permalink to &quot;链表基本操作&quot;">​</a></h2><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">InitLinkList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">L);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 初始化链表</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BeforeHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">L, data);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // 头插法</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AfterHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">L, data);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           // 尾插法</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BeforeInsert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p, data);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           // p 节点之前插入</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AfterInsert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p, data);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // p 节点之后插入</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BeforeDelete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // 删除 p 节点之前节点</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AfterDelete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           // 删除 p 节点之后节点</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="特殊链表" tabindex="-1">特殊链表 <a class="header-anchor" href="#特殊链表" aria-label="Permalink to &quot;特殊链表&quot;">​</a></h2><h3 id="双链表" tabindex="-1">双链表 <a class="header-anchor" href="#双链表" aria-label="Permalink to &quot;双链表&quot;">​</a></h3><h3 id="循环链表" tabindex="-1">循环链表 <a class="header-anchor" href="#循环链表" aria-label="Permalink to &quot;循环链表&quot;">​</a></h3><h3 id="循环双链表" tabindex="-1">循环双链表 <a class="header-anchor" href="#循环双链表" aria-label="Permalink to &quot;循环双链表&quot;">​</a></h3><h3 id="静态链表" tabindex="-1">静态链表 <a class="header-anchor" href="#静态链表" aria-label="Permalink to &quot;静态链表&quot;">​</a></h3>`,13);function g(u,b,y,m,_,A){const e=i("el-divider"),t=i("el-tag");return k(),p("div",null,[o,a(e),s("div",c,[a(t,null,{default:h(()=>[n("data structure")]),_:1})]),E])}const f=l(d,[["render",g]]);export{F as __pageData,f as default};
