import{av as p,p as k,U as s,q as t,O as i,S as a,aR as r,ah as e,m as d}from"./chunks/framework.7WxYM5Sz.js";const B=JSON.parse('{"title":"Notification 发送通知","description":"","frontmatter":{"title":"Notification 发送通知","layout":"doc"},"headers":[],"relativePath":"blogs/electron/send-notification.md","filePath":"blogs/electron/send-notification.md","lastUpdated":1694504129000}'),o={name:"blogs/electron/send-notification.md"},c=t("h1",{id:"notification-发送通知",tabindex:"-1"},[a("Notification 发送通知 "),t("a",{class:"header-anchor",href:"#notification-发送通知","aria-label":'Permalink to "Notification 发送通知"'},"​")],-1),E={style:{display:"flex",gap:"10px"}},g=r(`<ul><li>前提请先了解主进程与渲染进程通信</li></ul><h2 id="主进程中定义接受通知的函数" tabindex="-1">主进程中定义接受通知的函数 <a class="header-anchor" href="#主进程中定义接受通知的函数" aria-label="Permalink to &quot;主进程中定义接受通知的函数&quot;">​</a></h2><blockquote><p>通过监听渲染进程发送到的通知消息展示需要通知的信息</p></blockquote><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ipcMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">handle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;notification&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">_event</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Notification</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    title,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    body,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">show</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><blockquote><p>Windows 10默认通知时间为 <code>5s</code></p></blockquote><h2 id="渲染进程定义发送函数-并暴露给页面文件使用" tabindex="-1">渲染进程定义发送函数，并暴露给页面文件使用 <a class="header-anchor" href="#渲染进程定义发送函数-并暴露给页面文件使用" aria-label="Permalink to &quot;渲染进程定义发送函数，并暴露给页面文件使用&quot;">​</a></h2><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 定义发送给主进程的函数</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sendNotification</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">body</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ipcRenderer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;notification&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, title, body)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用\`contextBridge.exposeInMainWorld\` 暴露 sendNotification 函数</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="页面中使用" tabindex="-1">页面中使用 <a class="header-anchor" href="#页面中使用" aria-label="Permalink to &quot;页面中使用&quot;">​</a></h2><div class="language-ts vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// UtilsTools 渲染进程中暴露的实例名称（自定义），包括暴露的 sendNotification 方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">window.UtilsTools.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sendNotification</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;title&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">count</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">value</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>`,9),y=t("div",null,"这里使用的是主进程与渲染进程双向通信，可在通知后或者点击通知后执行操作返回给渲染进程，以便以他操作",-1);function u(b,F,_,m,f,v){const l=e("el-divider"),n=e("el-tag"),h=e("el-alert");return d(),k("div",null,[c,s(l),t("div",E,[s(n,null,{default:i(()=>[a("electron")]),_:1}),s(n,null,{default:i(()=>[a("vue")]),_:1}),s(n,null,{default:i(()=>[a("vite")]),_:1}),s(n,null,{default:i(()=>[a("notification")]),_:1})]),g,s(h,{"show-icon":"",type:"info",effect:"dark",closable:!1},{title:i(()=>[y]),_:1})])}const A=p(o,[["render",u]]);export{B as __pageData,A as default};
