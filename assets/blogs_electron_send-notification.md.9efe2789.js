import{_ as c,H as t,c as i,J as s,C as l,E as a,a as n,V as r,o as y}from"./chunks/framework.6db0e9f3.js";const N=JSON.parse('{"title":"Notification 发送通知","description":"","frontmatter":{"title":"Notification 发送通知","layout":"doc"},"headers":[],"relativePath":"blogs/electron/send-notification.md","filePath":"blogs/electron/send-notification.md","lastUpdated":1694504129000}'),D={name:"blogs/electron/send-notification.md"},F=l("h1",{id:"notification-发送通知",tabindex:"-1"},[n("Notification 发送通知 "),l("a",{class:"header-anchor",href:"#notification-发送通知","aria-label":'Permalink to "Notification 发送通知"'},"​")],-1),C={style:{display:"flex",gap:"10px"}},A=r(`<ul><li>前提请先了解主进程与渲染进程通信</li></ul><h2 id="主进程中定义接受通知的函数" tabindex="-1">主进程中定义接受通知的函数 <a class="header-anchor" href="#主进程中定义接受通知的函数" aria-label="Permalink to &quot;主进程中定义接受通知的函数&quot;">​</a></h2><blockquote><p>通过监听渲染进程发送到的通知消息展示需要通知的信息</p></blockquote><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">ipcMain</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">handle</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">notification</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">_event</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">title</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">body</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Notification</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">title</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">show</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><blockquote><p>Windows 10默认通知时间为 <code>5s</code></p></blockquote><h2 id="渲染进程定义发送函数-并暴露给页面文件使用" tabindex="-1">渲染进程定义发送函数，并暴露给页面文件使用 <a class="header-anchor" href="#渲染进程定义发送函数-并暴露给页面文件使用" aria-label="Permalink to &quot;渲染进程定义发送函数，并暴露给页面文件使用&quot;">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 定义发送给主进程的函数</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> sendNotification </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">title</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">body</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> ipcRenderer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">invoke</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">notification</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> title</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> body)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 使用\`contextBridge.exposeInMainWorld\` 暴露 sendNotification 函数</span></span></code></pre></div><h2 id="页面中使用" tabindex="-1">页面中使用 <a class="header-anchor" href="#页面中使用" aria-label="Permalink to &quot;页面中使用&quot;">​</a></h2><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// UtilsTools 渲染进程中暴露的实例名称（自定义），包括暴露的 sendNotification 方法</span></span>
<span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">UtilsTools</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sendNotification</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">title</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`\${</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">}\`</span><span style="color:#A6ACCD;">)</span></span></code></pre></div>`,9),d=l("div",null,"这里使用的是主进程与渲染进程双向通信，可在通知后或者点击通知后执行操作返回给渲染进程，以便以他操作",-1);function f(_,h,u,b,g,m){const e=t("el-divider"),o=t("el-tag"),p=t("el-alert");return y(),i("div",null,[F,s(e),l("div",C,[s(o,null,{default:a(()=>[n("electron")]),_:1}),s(o,null,{default:a(()=>[n("vue")]),_:1}),s(o,null,{default:a(()=>[n("vite")]),_:1}),s(o,null,{default:a(()=>[n("notification")]),_:1})]),A,s(p,{"show-icon":"",type:"info",effect:"dark",closable:!1},{title:a(()=>[d]),_:1})])}const k=c(D,[["render",f]]);export{N as __pageData,k as default};
