import{_ as t,H as e,c,J as s,C as o,E as l,a,V as r,o as D}from"./chunks/framework.6db0e9f3.js";const w=JSON.parse('{"title":"主进程与渲染进程通信","description":"","frontmatter":{"title":"主进程与渲染进程通信","layout":"doc"},"headers":[],"relativePath":"blogs/electron/process-communication.md","filePath":"blogs/electron/process-communication.md","lastUpdated":1694504129000}'),i={name:"blogs/electron/process-communication.md"},y=o("h1",{id:"主进程与渲染进程通信",tabindex:"-1"},[a("主进程与渲染进程通信 "),o("a",{class:"header-anchor",href:"#主进程与渲染进程通信","aria-label":'Permalink to "主进程与渲染进程通信"'},"​")],-1),F={style:{display:"flex",gap:"10px"}},A=r(`<h2 id="ipcmain" tabindex="-1">ipcMain <a class="header-anchor" href="#ipcmain" aria-label="Permalink to &quot;ipcMain&quot;">​</a></h2><blockquote><p>从主进程到渲染进程的异步通信。主进程：程序执行的入口。 当应用启动时，Node.js 运行主进程，主进程通过 BrowserWindow 创建页面。</p></blockquote><h2 id="ipcrenderer" tabindex="-1">ipcRenderer <a class="header-anchor" href="#ipcrenderer" aria-label="Permalink to &quot;ipcRenderer&quot;">​</a></h2><blockquote><p>从渲染进程到主进程的异步通信。渲染进程：页面渲染的进程。 渲染进程是页面，页面中的 js 代码通过 ipcRenderer 向主进程通信。</p></blockquote><h2 id="主进程向渲染进程发送消息" tabindex="-1">主进程向渲染进程发送消息 <a class="header-anchor" href="#主进程向渲染进程发送消息" aria-label="Permalink to &quot;主进程向渲染进程发送消息&quot;">​</a></h2><h3 id="创建-browserwindow" tabindex="-1">创建 BrowserWindow <a class="header-anchor" href="#创建-browserwindow" aria-label="Permalink to &quot;创建 BrowserWindow&quot;">​</a></h3><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> win </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">BrowserWindow</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">width</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1200</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">height</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">800</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">win</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">webContents</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">main-to-render</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hello render</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#676E95;font-style:italic;">// BrowserWindow 从主进程发送消息到渲染进程</span></span></code></pre></div><h3 id="渲染进程监听消息通道" tabindex="-1">渲染进程监听消息通道 <a class="header-anchor" href="#渲染进程监听消息通道" aria-label="Permalink to &quot;渲染进程监听消息通道&quot;">​</a></h3><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">ipcRenderer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">main-to-render</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,(</span><span style="color:#A6ACCD;font-style:italic;">event</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;font-style:italic;">arg</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">arg</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// hello render</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><h2 id="渲染进程向主进程发送消息" tabindex="-1">渲染进程向主进程发送消息 <a class="header-anchor" href="#渲染进程向主进程发送消息" aria-label="Permalink to &quot;渲染进程向主进程发送消息&quot;">​</a></h2><h3 id="主进程创建通道监听" tabindex="-1">主进程创建通道监听 <a class="header-anchor" href="#主进程创建通道监听" aria-label="Permalink to &quot;主进程创建通道监听&quot;">​</a></h3><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">ipcMain</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">set-title</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> (event</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> title) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  const webContents </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> event</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sender </span><span style="color:#676E95;font-style:italic;">//当前的 BrowserWindow 对象</span></span>
<span class="line"><span style="color:#A6ACCD;">  const win </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> BrowserWindow</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fromWebContents</span><span style="color:#A6ACCD;">(webContents)</span></span>
<span class="line"><span style="color:#A6ACCD;">  win.setTitle(title)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><h3 id="使用-contextbridge-暴露api到渲染进程" tabindex="-1">使用 <code>contextBridge</code> 暴露API到渲染进程 <a class="header-anchor" href="#使用-contextbridge-暴露api到渲染进程" aria-label="Permalink to &quot;使用 \`contextBridge\` 暴露API到渲染进程&quot;">​</a></h3><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> contextBridge</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ipcRenderer </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">electron</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">contextBridge</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">exposeInMainWorld</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">electronAPI</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">setTitle</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">title</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> ipcRenderer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">set-title</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> title)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><h3 id="vue-js-ts-执行方法" tabindex="-1">*.vue *.js *.ts 执行方法 <a class="header-anchor" href="#vue-js-ts-执行方法" aria-label="Permalink to &quot;*.vue *.js *.ts 执行方法&quot;">​</a></h3><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">electronAPI</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setTitle</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">page title</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><h2 id="渲染进程向主进程发送消息等待主进程回应-双向" tabindex="-1">渲染进程向主进程发送消息等待主进程回应（双向） <a class="header-anchor" href="#渲染进程向主进程发送消息等待主进程回应-双向" aria-label="Permalink to &quot;渲染进程向主进程发送消息等待主进程回应（双向）&quot;">​</a></h2><h3 id="主进程定义通道监听-并返回结果" tabindex="-1">主进程定义通道监听，并返回结果 <a class="header-anchor" href="#主进程定义通道监听-并返回结果" aria-label="Permalink to &quot;主进程定义通道监听，并返回结果&quot;">​</a></h3><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">handleTwoSend</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">renderData</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 处理渲染进程的数据</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">main process finish</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h3 id="主进程监听通道-执行监听方法" tabindex="-1">主进程监听通道，执行监听方法 <a class="header-anchor" href="#主进程监听通道-执行监听方法" aria-label="Permalink to &quot;主进程监听通道，执行监听方法&quot;">​</a></h3><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">ipcMain</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">handle</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">twoSend</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> handleTwoSend)</span></span></code></pre></div><h3 id="渲染进程向主进程发送消息-1" tabindex="-1">渲染进程向主进程发送消息 <a class="header-anchor" href="#渲染进程向主进程发送消息-1" aria-label="Permalink to &quot;渲染进程向主进程发送消息&quot;">​</a></h3><blockquote><p>渲染进程通过 <code>ipcRenderer.invoke</code> 将消息发送给主进程 使用 <code>contextBridge</code> 暴露API到渲染进程以供使用</p></blockquote><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> contextBridge</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> ipcRenderer </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">electron</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">contextBridge</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">exposeInMainWorld</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">electronAPI</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">twoSend</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> ipcRenderer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">invoke</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">twoSend</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div><h3 id="文件中调用" tabindex="-1">文件中调用 <a class="header-anchor" href="#文件中调用" aria-label="Permalink to &quot;文件中调用&quot;">​</a></h3><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">electronAPI</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">twoSend</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#A6ACCD;font-style:italic;">res</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span></code></pre></div>`,26);function C(d,h,u,b,g,m){const p=e("el-divider"),n=e("el-tag");return D(),c("div",null,[y,s(p),o("div",F,[s(n,null,{default:l(()=>[a("electron")]),_:1}),s(n,null,{default:l(()=>[a("vue")]),_:1}),s(n,null,{default:l(()=>[a("vite")]),_:1})]),A])}const _=t(i,[["render",C]]);export{w as __pageData,_ as default};
