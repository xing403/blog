import{_ as t,C as e,c,H as s,k as o,w as l,a as n,Q as r,o as i}from"./chunks/framework.b0840c63.js";const k=JSON.parse('{"title":"主进程与渲染进程通信","description":"","frontmatter":{"title":"主进程与渲染进程通信","layout":"doc"},"headers":[],"relativePath":"blogs/electron/process-communication.md","filePath":"blogs/electron/process-communication.md","lastUpdated":1694504129000}'),E={name:"blogs/electron/process-communication.md"},y=o("h1",{id:"主进程与渲染进程通信",tabindex:"-1"},[n("主进程与渲染进程通信 "),o("a",{class:"header-anchor",href:"#主进程与渲染进程通信","aria-label":'Permalink to "主进程与渲染进程通信"'},"​")],-1),d={style:{display:"flex",gap:"10px"}},h=r(`<h2 id="ipcmain" tabindex="-1">ipcMain <a class="header-anchor" href="#ipcmain" aria-label="Permalink to &quot;ipcMain&quot;">​</a></h2><blockquote><p>从主进程到渲染进程的异步通信。主进程：程序执行的入口。 当应用启动时，Node.js 运行主进程，主进程通过 BrowserWindow 创建页面。</p></blockquote><h2 id="ipcrenderer" tabindex="-1">ipcRenderer <a class="header-anchor" href="#ipcrenderer" aria-label="Permalink to &quot;ipcRenderer&quot;">​</a></h2><blockquote><p>从渲染进程到主进程的异步通信。渲染进程：页面渲染的进程。 渲染进程是页面，页面中的 js 代码通过 ipcRenderer 向主进程通信。</p></blockquote><h2 id="主进程向渲染进程发送消息" tabindex="-1">主进程向渲染进程发送消息 <a class="header-anchor" href="#主进程向渲染进程发送消息" aria-label="Permalink to &quot;主进程向渲染进程发送消息&quot;">​</a></h2><h3 id="创建-browserwindow" tabindex="-1">创建 BrowserWindow <a class="header-anchor" href="#创建-browserwindow" aria-label="Permalink to &quot;创建 BrowserWindow&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">win</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BrowserWindow</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  width: </span><span style="color:#79B8FF;">1200</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  height: </span><span style="color:#79B8FF;">800</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">win.webContents.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;main-to-render&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;hello render&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// BrowserWindow 从主进程发送消息到渲染进程</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">win</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BrowserWindow</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  width: </span><span style="color:#005CC5;">1200</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  height: </span><span style="color:#005CC5;">800</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#24292E;">win.webContents.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;main-to-render&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;hello render&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// BrowserWindow 从主进程发送消息到渲染进程</span></span></code></pre></div><h3 id="渲染进程监听消息通道" tabindex="-1">渲染进程监听消息通道 <a class="header-anchor" href="#渲染进程监听消息通道" aria-label="Permalink to &quot;渲染进程监听消息通道&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ipcRenderer.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;main-to-render&#39;</span><span style="color:#E1E4E8;">,(</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">arg</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(arg) </span><span style="color:#6A737D;">// hello render</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ipcRenderer.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;main-to-render&#39;</span><span style="color:#24292E;">,(</span><span style="color:#E36209;">event</span><span style="color:#24292E;">,</span><span style="color:#E36209;">arg</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(arg) </span><span style="color:#6A737D;">// hello render</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h2 id="渲染进程向主进程发送消息" tabindex="-1">渲染进程向主进程发送消息 <a class="header-anchor" href="#渲染进程向主进程发送消息" aria-label="Permalink to &quot;渲染进程向主进程发送消息&quot;">​</a></h2><h3 id="主进程创建通道监听" tabindex="-1">主进程创建通道监听 <a class="header-anchor" href="#主进程创建通道监听" aria-label="Permalink to &quot;主进程创建通道监听&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ipcMain.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;set-title&#39;</span><span style="color:#E1E4E8;">, (event, title) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  const webContents </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> event.sender </span><span style="color:#6A737D;">//当前的 BrowserWindow 对象</span></span>
<span class="line"><span style="color:#E1E4E8;">  const win </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> BrowserWindow.</span><span style="color:#B392F0;">fromWebContents</span><span style="color:#E1E4E8;">(webContents)</span></span>
<span class="line"><span style="color:#E1E4E8;">  win.setTitle(title)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ipcMain.</span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;set-title&#39;</span><span style="color:#24292E;">, (event, title) {</span></span>
<span class="line"><span style="color:#24292E;">  const webContents </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> event.sender </span><span style="color:#6A737D;">//当前的 BrowserWindow 对象</span></span>
<span class="line"><span style="color:#24292E;">  const win </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> BrowserWindow.</span><span style="color:#6F42C1;">fromWebContents</span><span style="color:#24292E;">(webContents)</span></span>
<span class="line"><span style="color:#24292E;">  win.setTitle(title)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h3 id="使用-contextbridge-暴露api到渲染进程" tabindex="-1">使用 <code>contextBridge</code> 暴露API到渲染进程 <a class="header-anchor" href="#使用-contextbridge-暴露api到渲染进程" aria-label="Permalink to &quot;使用 \`contextBridge\` 暴露API到渲染进程&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">contextBridge</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">ipcRenderer</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;electron&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">contextBridge.</span><span style="color:#B392F0;">exposeInMainWorld</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;electronAPI&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">setTitle</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">title</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> ipcRenderer.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;set-title&#39;</span><span style="color:#E1E4E8;">, title)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">contextBridge</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">ipcRenderer</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;electron&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">contextBridge.</span><span style="color:#6F42C1;">exposeInMainWorld</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;electronAPI&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">setTitle</span><span style="color:#24292E;">: (</span><span style="color:#E36209;">title</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> ipcRenderer.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;set-title&#39;</span><span style="color:#24292E;">, title)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h3 id="vue-js-ts-执行方法" tabindex="-1">*.vue *.js *.ts 执行方法 <a class="header-anchor" href="#vue-js-ts-执行方法" aria-label="Permalink to &quot;*.vue *.js *.ts 执行方法&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">window.electronAPI.</span><span style="color:#B392F0;">setTitle</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;page title&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">window.electronAPI.</span><span style="color:#6F42C1;">setTitle</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;page title&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><h2 id="渲染进程向主进程发送消息等待主进程回应-双向" tabindex="-1">渲染进程向主进程发送消息等待主进程回应（双向） <a class="header-anchor" href="#渲染进程向主进程发送消息等待主进程回应-双向" aria-label="Permalink to &quot;渲染进程向主进程发送消息等待主进程回应（双向）&quot;">​</a></h2><h3 id="主进程定义通道监听-并返回结果" tabindex="-1">主进程定义通道监听，并返回结果 <a class="header-anchor" href="#主进程定义通道监听-并返回结果" aria-label="Permalink to &quot;主进程定义通道监听，并返回结果&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handleTwoSend</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">renderData</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 处理渲染进程的数据</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;main process finish&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handleTwoSend</span><span style="color:#24292E;">(</span><span style="color:#E36209;">renderData</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">any</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 处理渲染进程的数据</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;main process finish&#39;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="主进程监听通道-执行监听方法" tabindex="-1">主进程监听通道，执行监听方法 <a class="header-anchor" href="#主进程监听通道-执行监听方法" aria-label="Permalink to &quot;主进程监听通道，执行监听方法&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">ipcMain.</span><span style="color:#B392F0;">handle</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;twoSend&#39;</span><span style="color:#E1E4E8;">, handleTwoSend)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">ipcMain.</span><span style="color:#6F42C1;">handle</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;twoSend&#39;</span><span style="color:#24292E;">, handleTwoSend)</span></span></code></pre></div><h3 id="渲染进程向主进程发送消息-1" tabindex="-1">渲染进程向主进程发送消息 <a class="header-anchor" href="#渲染进程向主进程发送消息-1" aria-label="Permalink to &quot;渲染进程向主进程发送消息&quot;">​</a></h3><blockquote><p>渲染进程通过 <code>ipcRenderer.invoke</code> 将消息发送给主进程 使用 <code>contextBridge</code> 暴露API到渲染进程以供使用</p></blockquote><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">contextBridge</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">ipcRenderer</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;electron&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">contextBridge.</span><span style="color:#B392F0;">exposeInMainWorld</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;electronAPI&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">twoSend</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> ipcRenderer.</span><span style="color:#B392F0;">invoke</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;twoSend&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">contextBridge</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">ipcRenderer</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;electron&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">contextBridge.</span><span style="color:#6F42C1;">exposeInMainWorld</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;electronAPI&#39;</span><span style="color:#24292E;">, {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">twoSend</span><span style="color:#24292E;">: () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> ipcRenderer.</span><span style="color:#6F42C1;">invoke</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;twoSend&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h3 id="文件中调用" tabindex="-1">文件中调用 <a class="header-anchor" href="#文件中调用" aria-label="Permalink to &quot;文件中调用&quot;">​</a></h3><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">window.electronAPI.</span><span style="color:#B392F0;">twoSend</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(res)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">window.electronAPI.</span><span style="color:#6F42C1;">twoSend</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#E36209;">res</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(res)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div>`,26);function F(u,g,b,C,v,B){const p=e("el-divider"),a=e("el-tag");return i(),c("div",null,[y,s(p),o("div",d,[s(a,null,{default:l(()=>[n("electron")]),_:1}),s(a,null,{default:l(()=>[n("vue")]),_:1}),s(a,null,{default:l(()=>[n("vite")]),_:1})]),h])}const m=t(E,[["render",F]]);export{k as __pageData,m as default};
