import{_ as t,C as p,c,H as s,k as n,w as o,a,Q as r,o as y}from"./chunks/framework.b0840c63.js";const m=JSON.parse('{"title":"数组与字典的相互转换","description":"","frontmatter":{"title":"数组与字典的相互转换","layout":"doc"},"headers":[],"relativePath":"blogs/others/Arr2Dict.md","filePath":"blogs/others/Arr2Dict.md","lastUpdated":1694504129000}'),E={name:"blogs/others/Arr2Dict.md"},i=n("h1",{id:"数组与字典的相互转换",tabindex:"-1"},[a("数组与字典的相互转换 "),n("a",{class:"header-anchor",href:"#数组与字典的相互转换","aria-label":'Permalink to "数组与字典的相互转换"'},"​")],-1),F={style:{display:"flex",gap:"10px"}},d=r(`<h2 id="数组或字典格式" tabindex="-1">数组或字典格式 <a class="header-anchor" href="#数组或字典格式" aria-label="Permalink to &quot;数组或字典格式&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> array </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">  { key: </span><span style="color:#9ECBFF;">&#39;key1&#39;</span><span style="color:#E1E4E8;">, value: </span><span style="color:#9ECBFF;">&#39;value1&#39;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">  { key: </span><span style="color:#9ECBFF;">&#39;key2&#39;</span><span style="color:#E1E4E8;">, value: </span><span style="color:#9ECBFF;">&#39;value2&#39;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">  { key: </span><span style="color:#9ECBFF;">&#39;key3&#39;</span><span style="color:#E1E4E8;">, value: </span><span style="color:#9ECBFF;">&#39;value3&#39;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> dictionary </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  key1: </span><span style="color:#9ECBFF;">&#39;value1&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  key2: </span><span style="color:#9ECBFF;">&#39;value2&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  key3: </span><span style="color:#9ECBFF;">&#39;value3&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> dictionary </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  key1: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    value11: </span><span style="color:#9ECBFF;">&#39;value11&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    value12: </span><span style="color:#9ECBFF;">&#39;value12&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  key2: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    value21: </span><span style="color:#9ECBFF;">&#39;value21&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    value22: </span><span style="color:#9ECBFF;">&#39;value22&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  key3: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    value31: </span><span style="color:#9ECBFF;">&#39;value31&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    value32: </span><span style="color:#9ECBFF;">&#39;value32&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> array </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span></span>
<span class="line"><span style="color:#24292E;">  { key: </span><span style="color:#032F62;">&#39;key1&#39;</span><span style="color:#24292E;">, value: </span><span style="color:#032F62;">&#39;value1&#39;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">  { key: </span><span style="color:#032F62;">&#39;key2&#39;</span><span style="color:#24292E;">, value: </span><span style="color:#032F62;">&#39;value2&#39;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">  { key: </span><span style="color:#032F62;">&#39;key3&#39;</span><span style="color:#24292E;">, value: </span><span style="color:#032F62;">&#39;value3&#39;</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> dictionary </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  key1: </span><span style="color:#032F62;">&#39;value1&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  key2: </span><span style="color:#032F62;">&#39;value2&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  key3: </span><span style="color:#032F62;">&#39;value3&#39;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> dictionary </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  key1: {</span></span>
<span class="line"><span style="color:#24292E;">    value11: </span><span style="color:#032F62;">&#39;value11&#39;</span></span>
<span class="line"><span style="color:#24292E;">    value12: </span><span style="color:#032F62;">&#39;value12&#39;</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  key2: {</span></span>
<span class="line"><span style="color:#24292E;">    value21: </span><span style="color:#032F62;">&#39;value21&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    value22: </span><span style="color:#032F62;">&#39;value22&#39;</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  key3: {</span></span>
<span class="line"><span style="color:#24292E;">    value31: </span><span style="color:#032F62;">&#39;value31&#39;</span></span>
<span class="line"><span style="color:#24292E;">    value32: </span><span style="color:#032F62;">&#39;value32&#39;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="数组转化为字典" tabindex="-1">数组转化为字典 <a class="header-anchor" href="#数组转化为字典" aria-label="Permalink to &quot;数组转化为字典&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Arr2Dict</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">array</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;key&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">del_key</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> array.</span><span style="color:#B392F0;">reduce</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">obj</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">item</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">keys</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">(item)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">keys.</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(key))</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`the key </span><span style="color:#79B8FF;">\\\`</span><span style="color:#9ECBFF;">\${</span><span style="color:#E1E4E8;">key</span><span style="color:#9ECBFF;">}</span><span style="color:#79B8FF;">\\\`</span><span style="color:#9ECBFF;"> not exists\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> ([</span><span style="color:#9ECBFF;">&#39;object&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;function&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;undefined&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;symbol&#39;</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">includes</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">typeof</span><span style="color:#E1E4E8;"> item[key]))</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`the value of key </span><span style="color:#79B8FF;">\\\`</span><span style="color:#9ECBFF;">\${</span><span style="color:#E1E4E8;">key</span><span style="color:#9ECBFF;">}</span><span style="color:#79B8FF;">\\\`</span><span style="color:#9ECBFF;"> typeof </span><span style="color:#79B8FF;">\\\`</span><span style="color:#9ECBFF;">\${</span><span style="color:#F97583;">typeof</span><span style="color:#9ECBFF;"> </span><span style="color:#E1E4E8;">item</span><span style="color:#9ECBFF;">[</span><span style="color:#E1E4E8;">key</span><span style="color:#9ECBFF;">]</span><span style="color:#9ECBFF;">}</span><span style="color:#79B8FF;">\\\`</span><span style="color:#9ECBFF;">, is not acceptable type\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#B392F0;">isNaN</span><span style="color:#E1E4E8;">(item[key]))</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`the value of key </span><span style="color:#79B8FF;">\\\`</span><span style="color:#9ECBFF;">\${</span><span style="color:#E1E4E8;">key</span><span style="color:#9ECBFF;">}</span><span style="color:#79B8FF;">\\\`</span><span style="color:#9ECBFF;"> is NaN, is not acceptable type\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (keys.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// do nothing</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> item</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (keys.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// transform [{key: value}]</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> value_key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> keys.</span><span style="color:#B392F0;">filter</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> key)[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">      obj[item[key]] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> item[value_key];</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {  </span><span style="color:#6A737D;">// transform [{ key: { key1: value1, key2: value2, ...} }]</span></span>
<span class="line"><span style="color:#E1E4E8;">      obj[item[key]] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> item;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (del_key) </span><span style="color:#F97583;">delete</span><span style="color:#E1E4E8;"> item[key];  </span><span style="color:#6A737D;">// delete the value corresponding to key</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> obj;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }, {});</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Arr2Dict</span><span style="color:#24292E;">(</span><span style="color:#E36209;">array</span><span style="color:#24292E;">, </span><span style="color:#E36209;">key</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;key&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">del_key</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> array.</span><span style="color:#6F42C1;">reduce</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">obj</span><span style="color:#24292E;">, </span><span style="color:#E36209;">item</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">keys</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">(item)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">keys.</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(key))</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`the key </span><span style="color:#005CC5;">\\\`</span><span style="color:#032F62;">\${</span><span style="color:#24292E;">key</span><span style="color:#032F62;">}</span><span style="color:#005CC5;">\\\`</span><span style="color:#032F62;"> not exists\`</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> ([</span><span style="color:#032F62;">&#39;object&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;function&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;undefined&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;symbol&#39;</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">includes</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">typeof</span><span style="color:#24292E;"> item[key]))</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`the value of key </span><span style="color:#005CC5;">\\\`</span><span style="color:#032F62;">\${</span><span style="color:#24292E;">key</span><span style="color:#032F62;">}</span><span style="color:#005CC5;">\\\`</span><span style="color:#032F62;"> typeof </span><span style="color:#005CC5;">\\\`</span><span style="color:#032F62;">\${</span><span style="color:#D73A49;">typeof</span><span style="color:#032F62;"> </span><span style="color:#24292E;">item</span><span style="color:#032F62;">[</span><span style="color:#24292E;">key</span><span style="color:#032F62;">]</span><span style="color:#032F62;">}</span><span style="color:#005CC5;">\\\`</span><span style="color:#032F62;">, is not acceptable type\`</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#6F42C1;">isNaN</span><span style="color:#24292E;">(item[key]))</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`the value of key </span><span style="color:#005CC5;">\\\`</span><span style="color:#032F62;">\${</span><span style="color:#24292E;">key</span><span style="color:#032F62;">}</span><span style="color:#005CC5;">\\\`</span><span style="color:#032F62;"> is NaN, is not acceptable type\`</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (keys.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// do nothing</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> item</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (keys.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// transform [{key: value}]</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> value_key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> keys.</span><span style="color:#6F42C1;">filter</span><span style="color:#24292E;">(</span><span style="color:#E36209;">i</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> key)[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">      obj[item[key]] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> item[value_key];</span></span>
<span class="line"><span style="color:#24292E;">    } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {  </span><span style="color:#6A737D;">// transform [{ key: { key1: value1, key2: value2, ...} }]</span></span>
<span class="line"><span style="color:#24292E;">      obj[item[key]] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> item;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (del_key) </span><span style="color:#D73A49;">delete</span><span style="color:#24292E;"> item[key];  </span><span style="color:#6A737D;">// delete the value corresponding to key</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> obj;</span></span>
<span class="line"><span style="color:#24292E;">  }, {});</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="支持的键所对应的类型" tabindex="-1">支持的键所对应的类型 <a class="header-anchor" href="#支持的键所对应的类型" aria-label="Permalink to &quot;支持的键所对应的类型&quot;">​</a></h2><table><thead><tr><th style="text-align:center;">键对应值类型</th><th style="text-align:center;">是否支持</th><th style="text-align:center;">键对应值类型</th><th style="text-align:center;">是否支持</th></tr></thead><tbody><tr><td style="text-align:center;"><code>number</code></td><td style="text-align:center;">​✔️</td><td style="text-align:center;"><code>string</code></td><td style="text-align:center;">​✔️</td></tr><tr><td style="text-align:center;"><code>boolean</code></td><td style="text-align:center;">​✔️</td><td style="text-align:center;"><code>function</code></td><td style="text-align:center;">❌</td></tr><tr><td style="text-align:center;"><code>array</code></td><td style="text-align:center;">❌</td><td style="text-align:center;"><code>null</code></td><td style="text-align:center;">❌</td></tr><tr><td style="text-align:center;"><code>undefined</code></td><td style="text-align:center;">❌</td><td style="text-align:center;"><code>NaN</code></td><td style="text-align:center;">❌</td></tr><tr><td style="text-align:center;"><code>object</code></td><td style="text-align:center;">❌</td><td style="text-align:center;"><code>Symbol</code></td><td style="text-align:center;">❌</td></tr></tbody></table><ul><li>判断方式使用 <code>typeof</code></li></ul><h2 id="字典转化为数组" tabindex="-1">字典转化为数组 <a class="header-anchor" href="#字典转化为数组" aria-label="Permalink to &quot;字典转化为数组&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Dict2Arr</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">dictionary</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">key</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;key&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">save_key</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> array </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#B392F0;">keys</span><span style="color:#E1E4E8;">(dictionary).</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> item </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> dictionary[name]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (save_key) item[key] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> name</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> item;</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> array;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Dict2Arr</span><span style="color:#24292E;">(</span><span style="color:#E36209;">dictionary</span><span style="color:#24292E;">, </span><span style="color:#E36209;">key</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;key&#39;</span><span style="color:#24292E;">, </span><span style="color:#E36209;">save_key</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> array </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#6F42C1;">keys</span><span style="color:#24292E;">(dictionary).</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">name</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> item </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> dictionary[name]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (save_key) item[key] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> name</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> item;</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> array;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,9);function u(k,C,v,h,A,B){const e=p("el-divider"),l=p("el-tag");return y(),c("div",null,[i,s(e),n("div",F,[s(l,null,{default:o(()=>[a("array2dictionary")]),_:1}),s(l,null,{default:o(()=>[a("tools")]),_:1})]),d])}const f=t(E,[["render",u]]);export{m as __pageData,f as default};
