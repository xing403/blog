import{_ as e,C as a,c as t,H as n,k as s,w as c,a as l,Q as r,o as i}from"./chunks/framework.b0840c63.js";const f=JSON.parse('{"title":"线性表","description":"","frontmatter":{"title":"线性表","layout":"doc"},"headers":[],"relativePath":"blogs/data-structure/linear-list.md","filePath":"blogs/data-structure/linear-list.md","lastUpdated":1698109494000}'),y={name:"blogs/data-structure/linear-list.md"},E=s("h1",{id:"线性表",tabindex:"-1"},[l("线性表 "),s("a",{class:"header-anchor",href:"#线性表","aria-label":'Permalink to "线性表"'},"​")],-1),d={style:{display:"flex",gap:"10px"}},m=r('<h2 id="线性表的定义" tabindex="-1">线性表的定义 <a class="header-anchor" href="#线性表的定义" aria-label="Permalink to &quot;线性表的定义&quot;">​</a></h2><p>线性表是具有n个数据元素的有限序列，其中n为线性表的长度，当n=0时，线性表是空表，若用L表示线性表：</p><p align="center">L = {a1,a2,a3,...,an}</p><p>其中a1为第一个数据元素，又称表头元素，an为最后一个数据元素，又称表尾元素；除第一个元素外，每个元素都有唯一的前驱；除最后一个元素，每个元素都有唯一的后继。</p><h2 id="线性表的特点" tabindex="-1">线性表的特点 <a class="header-anchor" href="#线性表的特点" aria-label="Permalink to &quot;线性表的特点&quot;">​</a></h2><ul><li>表中元素个数有限</li><li>表中元素具有逻辑上的顺序性，表中元素都有先后顺序</li><li>表中元素都是数据元素，每个元素都是单个元素</li><li>表中元素数据类型相同，即：每个元素占有空间大小相同</li><li>表中元素具有抽象性，即：仅讨论元素之间的逻辑关系，而不考虑元素究竟表达什么内容</li></ul><h2 id="线性表的基本操作" tabindex="-1">线性表的基本操作 <a class="header-anchor" href="#线性表的基本操作" aria-label="Permalink to &quot;线性表的基本操作&quot;">​</a></h2><div class="language-cpp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">InitList</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">L)</span><span style="color:#6A737D;"> // 初始化表</span></span>\n<span class="line"><span style="color:#B392F0;">ListInsert</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">L,i,data)`</span><span style="color:#6A737D;"> // 插入操作，将元素插入到第i个位置</span></span>\n<span class="line"><span style="color:#B392F0;">ListDelete</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">L,i,</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">data)`</span><span style="color:#6A737D;"> // 删除操作，删除第i个元素</span></span>\n<span class="line"><span style="color:#B392F0;">ListModify</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">L,i,data)`</span><span style="color:#6A737D;"> // 修改操作</span></span>\n<span class="line"><span style="color:#B392F0;">ListFindByValue</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">L,data)`</span><span style="color:#6A737D;"> // 查找操作，按值查找</span></span>\n<span class="line"><span style="color:#B392F0;">ListFindByIndex</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">L,i,</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">data)`</span><span style="color:#6A737D;"> // 查找操作，按位置查找</span></span>\n<span class="line"><span style="color:#B392F0;">ListDestory</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">L)`</span><span style="color:#6A737D;"> // 销毁表</span></span>\n<span class="line"><span style="color:#B392F0;">getLength</span><span style="color:#E1E4E8;">(L)`</span><span style="color:#6A737D;"> // 获取表长度</span></span>\n<span class="line"><span style="color:#B392F0;">Empty</span><span style="color:#E1E4E8;">(L)`</span><span style="color:#6A737D;"> // 线性表判空</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">InitList</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">L)</span><span style="color:#6A737D;"> // 初始化表</span></span>\n<span class="line"><span style="color:#6F42C1;">ListInsert</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">L,i,data)`</span><span style="color:#6A737D;"> // 插入操作，将元素插入到第i个位置</span></span>\n<span class="line"><span style="color:#6F42C1;">ListDelete</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">L,i,</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">data)`</span><span style="color:#6A737D;"> // 删除操作，删除第i个元素</span></span>\n<span class="line"><span style="color:#6F42C1;">ListModify</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">L,i,data)`</span><span style="color:#6A737D;"> // 修改操作</span></span>\n<span class="line"><span style="color:#6F42C1;">ListFindByValue</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">L,data)`</span><span style="color:#6A737D;"> // 查找操作，按值查找</span></span>\n<span class="line"><span style="color:#6F42C1;">ListFindByIndex</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">L,i,</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">data)`</span><span style="color:#6A737D;"> // 查找操作，按位置查找</span></span>\n<span class="line"><span style="color:#6F42C1;">ListDestory</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">L)`</span><span style="color:#6A737D;"> // 销毁表</span></span>\n<span class="line"><span style="color:#6F42C1;">getLength</span><span style="color:#24292E;">(L)`</span><span style="color:#6A737D;"> // 获取表长度</span></span>\n<span class="line"><span style="color:#6F42C1;">Empty</span><span style="color:#24292E;">(L)`</span><span style="color:#6A737D;"> // 线性表判空</span></span></code></pre></div>',8);function L(h,_,D,u,F,A){const p=a("el-divider"),o=a("el-tag");return i(),t("div",null,[E,n(p),s("div",d,[n(o,null,{default:c(()=>[l("data structure")]),_:1})]),m])}const B=e(y,[["render",L]]);export{f as __pageData,B as default};
